// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account? @relation("AccountToUser")
  accountId String?  @unique

  // Existing relations from your schema
  AnnouncementsCreated Announcement[]
  RSVPs                RSVP[]
  ForumsCreated        Forum[]
  ForumCommentsCreated ForumComment[]
  GroupsCreated        Group[]
  GroupMembersCreated  GroupMember[]
  GroupMessagesCreated GroupMessage[]
  GroupTasksCreated    GroupTask[]
  GroupMediaCreated    GroupMedia[]
  CommentVotes         CommentVote[]
  ForumVotes           ForumVote[]
  chatbotInteraction   ChatbotInteraction?
}

enum role {
  USER
  STUDENT
  ADMIN
  LECTURER
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     Json     @db.JsonB()
  imageUrl    String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  targetUsers Json     @default("[]") @db.JsonB()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdById String
}

model Event {
  id               String    @id @default(cuid())
  subject          String // maps to "subject"
  description      String?
  location         String?
  imageUrl         String?
  startDate        DateTime // maps to start.dateTime
  endDate          DateTime // maps to end.dateTime
  calendarId       String? // external calendar integration
  createdTime      DateTime? // original created time from external source
  lastModifiedTime DateTime? // external last modified time
  recurrenceType   String? // "single", "recurring", etc.
  recurrence       Json? // flexible storage for recurrence object
  reminder         Json? // store overrides and default flag
  showAs           String? // e.g., "free", "busy"
  sensitivity      String? // e.g., "normal"
  categories       Json? // list of tags/categories
  htmlLink         String? // link to view in external calendar
  hasAttachments   Boolean   @default(false)
  meetingInfo      Json? // whole meetingInfo block
  occurrenceInfo   Json? // whole occurrenceInfo block
  organizer        Json? // full organizer block
  iCalUid          String? // standard iCal UID
  globalId         String? // external global identifier
  targetUsers      Json      @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account @relation(fields: [accountId], references: [id])

  accountId String

  RSVPs       RSVP[]
	attendees   EventAttendee[]
  attachments EventAttachment[]
}

model EventAttendee {
  id        String   @id @default(cuid())
  email     String
  name      String?
  type      String?  // Add this
  response  String?
  comment   String?
  attendeePermissions Json? // Add this
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  eventId String

  @@unique([eventId])
}

model EventAttachment {
  id              String   @id @default(cuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String? // optional: this could be a base64-encoded string or a URL depending on how it's handled
  contentLocation String?
  fileUrl         String? // if you store a downloadable link separately
  fileType        String? // if still used
  createdAt       DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])

  eventId String
}

model RSVP {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  userId  String
  eventId String
}

model CommentVote {
  id        String   @id @default(cuid())
  value     Int // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User         @relation(fields: [userId], references: [id])
  comment ForumComment @relation(fields: [commentId], references: [id])

  userId    String
  commentId String

  @@unique([userId, commentId])
  @@index([commentId])
}

// Also update your ForumComment model to include votes
model ForumComment {
  id        String         @id @default(cuid())
  content   Json           @db.JsonB()
  imageUrl  String?
  createdBy User           @relation(fields: [createdById], references: [id])
  forum     Forum          @relation(fields: [forumId], references: [id])
  parent    ForumComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   ForumComment[] @relation("CommentReplies")
  votes     CommentVote[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  createdById String
  forumId     String
  parentId    String?
}

// You might also want to add voting to the Forum model itself
model ForumVote {
  id        String   @id @default(cuid())
  value     Int // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  forum Forum @relation(fields: [forumId], references: [id])

  userId  String
  forumId String

  @@unique([userId, forumId])
  @@index([forumId])
}

// And update your Forum model
model Forum {
  id          String   @id @default(cuid())
  title       String
  description Json     @db.JsonB()
  imageUrl    String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  createdById String

  Comments ForumComment[]
  votes    ForumVote[]
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  members     Json     @db.JsonB()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdById String

  Members  GroupMember[]
  Messages GroupMessage[]
  Tasks    GroupTask[]
  Media    GroupMedia[]
}

model GroupMessage {
  id          String   @id @default(cuid())
  content     String?
  messageType String   @default("text") // "text", "image", "file"
  mediaUrl    String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  group       Group    @relation(fields: [groupId], references: [id])
  createdAt   DateTime @default(now())

  createdById String
  groupId     String
}

model GroupTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  group       Group    @relation(fields: [groupId], references: [id])
  dueDate     DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdById String
  groupId     String
}

model GroupMedia {
  id        String   @id @default(cuid())
  mediaType String
  mediaUrl  String
  createdBy User     @relation(fields: [createdById], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())

  createdById String
  groupId     String
}

model GroupMember {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  role      String   @default("MEMBER")
  createdAt DateTime @default(now())

  userId  String
  groupId String
}

model Account {
  id     String @id @default(cuid())
  userId String @unique

  binaryIndex Json?

  token        String @unique
  provider     String
  emailAddress String
  name         String

  calendarId String?

  nextDeltaToken         String?
  nextDeltaTokenCalendar String?

  user           User           @relation("AccountToUser", fields: [userId], references: [id])
  threads        Thread[]
  emailAddresses EmailAddress[]
  events         Event[]
}

model Thread {
  id              String   @id @default(cuid())
  subject         String
  lastMessageDate DateTime
  participantIds  String[]
  accountId       String
  account         Account  @relation(fields: [accountId], references: [id])

  done Boolean @default(false)

  inboxStatus Boolean @default(true)
  draftStatus Boolean @default(false)
  sentStatus  Boolean @default(false)

  emails Email[]

  @@index([accountId])
  @@index([done])
  @@index([inboxStatus])
  @@index([draftStatus])
  @@index([sentStatus])
  @@index([lastMessageDate])
}

model Email {
  id                   String                @id @default(cuid())
  threadId             String
  thread               Thread                @relation(fields: [threadId], references: [id])
  createdTime          DateTime
  lastModifiedTime     DateTime
  sentAt               DateTime
  receivedAt           DateTime
  internetMessageId    String
  subject              String
  sysLabels            String[]
  keywords             String[]
  sysClassifications   String[]
  sensitivity          Sensitivity           @default(normal)
  meetingMessageMethod MeetingMessageMethod?
  from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id])
  fromId               String
  to                   EmailAddress[]        @relation("ToEmails")
  cc                   EmailAddress[]        @relation("CcEmails")
  bcc                  EmailAddress[]        @relation("BccEmails")
  replyTo              EmailAddress[]        @relation("ReplyToEmails")
  hasAttachments       Boolean
  body                 String?
  bodySnippet          String?
  attachments          EmailAttachment[]
  inReplyTo            String?
  references           String?
  threadIndex          String?
  internetHeaders      Json[]
  nativeProperties     Json?
  folderId             String?
  omitted              String[]

  emailLabel EmailLabel @default(inbox)

  @@index([threadId])
  @@index([emailLabel])
  @@index([sentAt])
}

enum EmailLabel {
  inbox
  sent
  draft
}

model EmailAddress {
  id            String  @id @default(cuid())
  name          String?
  address       String
  raw           String?
  sentEmails    Email[] @relation("FromEmail")
  receivedTo    Email[] @relation("ToEmails")
  receivedCc    Email[] @relation("CcEmails")
  receivedBcc   Email[] @relation("BccEmails")
  replyToEmails Email[] @relation("ReplyToEmails")

  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  @@unique([accountId, address])
}

model EmailAttachment {
  id              String  @id @default(cuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String?
  contentLocation String?
  Email           Email   @relation(fields: [emailId], references: [id])
  emailId         String
}

model ChatbotInteraction {
  id String @id @default(cuid())

  day   String
  count Int    @default(1)

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@unique([day, userId])
  @@index([day, userId])
}

enum Sensitivity {
  normal
  private
  personal
  confidential
}

enum MeetingMessageMethod {
  request
  reply
  cancel
  counter
  other
}
